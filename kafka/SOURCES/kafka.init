#!/bin/bash

# kafka        Startup script for kafka

# chkconfig: - 85 15
# processname: kafka
# config: /etc/kafka/kafka.conf
# config: /etc/sysconfig/kafka
# pidfile: /var/run/kafka.pid
# description: kafka is a distributed publish-subscribe messaging system

### BEGIN INIT INFO
# Provides: kafka
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop kafka
### END INIT INFO

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kafka_user="kafka"
binary=${BINARY:-/opt/kafka/bin/kafka-server-start.sh}
conf_file=${CONF_FILE:-/etc/kafka/kafka.conf}

###############################################################################

kv[user]="$kafka_user"
kv[prog_name]="kafka"
kv[search_pattern]="$conf_file"
kv[auto_actions_log]=true

###############################################################################

kv.readSysconfig "kafka"

export LOG_DIR
export KAFKA_HEAP_OPTS
export KAFKA_JVM_PERFORMANCE_OPTS

###############################################################################

kv.addCommand "start"        "Start ${kv[prog_name]}"
kv.addCommand "stop"         "Stop ${kv[prog_name]}"
kv.addCommand "restart"      "Restart (stop+start) ${kv[prog_name]}"
kv.addCommand "status"       "Show current status of ${kv[prog_name]}"

kv.addCommandVars "stop" "force"

kv.addHandler "start"   "startServiceHandler"
kv.addHandler "stop"    "stopServiceHandler"
kv.addHandler "restart" "restartServiceHandler"

###############################################################################

startServiceHandler() {

  kv.daemonize "$binary" "$conf_file"

  [[ $? -ne $ACTION_OK ]] && return $ACTION_ERROR

  if kv.getStartStatus ; then
    return $ACTION_OK
  fi

  return $ACTION_ERROR
}

stopServiceHandler() {
  local pid=`kv.getPid`

  if [[ -n "$1" ]] ; then
    kv.killProcess $pid
  else
    kv.sendSignal SIGTERM
  fi

  if kv.getStopStatus ; then
    return $ACTION_OK
  fi

  return $ACTION_ERROR
}

###############################################################################

kv.go "$@"
