#!/bin/bash

###############################################################################

# memcached        The memcached daemon is a network memory cache service

# chkconfig: - 85 15
# processname: memcached
# config: /etc/sysconfig/memcached
# pidfile: /var/run/memcached.pid
# description: The memcached daemon is a network memory cache service.

### BEGIN INIT INFO
# Provides: memcached
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop memcached

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kv[prog_name]="memcached"

kv.readSysconfig

binary=${BINARY:-/usr/bin/memcached}
port=${PORT:-11211}
user=${USER:-memcached}
max_conn=${MAX_CONN:-1024}
cache_size=${CACHE_SIZE:-64}
log_file=${LOG_FILE}
log_level=${LOG_LEVEL}

kv[user]="$user"
kv[pid_dir]="/var/run/memcached"
kv[search_pattern]="$binary -d"

###############################################################################

kv.addHandler "start" "startServiceHandler"
kv.addHandler "stop"  "stopServiceHandler"
kv.addHandler "start" "postStartServiceHandler" "post"

###############################################################################

startServiceHandler() {
  if [[ "$log_level" != "0" ]] ; then
    local log_arg=""

    case $log_level in
      "1") log_arg="-v"   ;;
      "2") log_arg="-vv"  ;;
      "3") log_arg="-vvv" ;;
    esac

    kv.run "$binary -d -P ${kv[pid_file]} -u $user -p $port -m $cache_size -c $max_conn $log_arg >> $log_file 2>&1"
  else 
    kv.run "$binary -d -P ${kv[pid_file]} -u $user -p $port -m $cache_size -c $max_conn"
  fi

  [[ $? -ne 0 ]] && return $ACTION_ERROR

  kv.getStartStatus

  return $?
}

stopServiceHandler() {
  local pid=`kv.getPid`

  kv.sendSignal "$SIGNAL_TERM"

  if kv.getStopStatus ; then
    return $ACTION_OK
  else
    kv.killProcess "$pid"
    [[ $? -eq 0 ]] && return $ACTION_FORCED
  fi
}

postStartServiceHandler() {
  if kv.statusIs "$STATUS_STOPPED" ; then
    kv.checkSELinux
    return $?
  fi
}

###############################################################################

kv.go $@
