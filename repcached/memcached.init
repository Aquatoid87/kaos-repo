#!/bin/bash

# memcached        The memcached daemon is a network memory cache service

# chkconfig: - 85 15
# processname: memcached
# config: /etc/sysconfig/memcached
# pidfile: /var/run/memcached.pid
# description: The memcached daemon is a network memory cache service.

### BEGIN INIT INFO
# Provides: memcached
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop memcached

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kv[prog_name]="memcached"

kv.readSysconfig

binary=${BINARY:-/usr/bin/${kv[prog_name]}}
port=${PORT:-11211}
user=${USER:-${kv[prog_name]}}
max_conn=${MAX_CONN:-1024}
cache_size=${CACHE_SIZE:-64}
master_ip=${MASTER_IP}
master_port=${MASTER_PORT}

kv[pid_dir]=/var/run/${kv[prog_name]}
kv[search_pattern]="$binary -d"

###############################################################################

kv.addHandler "start" "startServiceHandler"
kv.addHandler "stop"  "stopServiceHandler"
kv.addHandler "start" "postStartServiceHandler" "post"

###############################################################################

startServiceHandler() {
  local args=`getArgs`

  $binary $args

  [[ $? -ne 0 ]] && return $ACTION_ERROR

  kv.getStartStatus

  return $?
}

stopServiceHandler() {
  local pid=`kv.getPid`

  kv.sendSignal "$SIGNAL_TERM"

  if kv.getStopStatus ; then
    return $ACTION_OK
  else
    kv.killProcess
    [[ $? -eq 0 ]] && return $ACTION_FORCED || return $ACTION_ERROR
  fi
}

postStartServiceHandler() {
  if kv.statusIs "$STATUS_STOPPED" ; then
    if [[ `getenforce` == "Enforcing" ]] ; then
      kv.show ""
      kv.show "Can't start ${kv[prog_name]}. It looks like SELinux blocks port binding." $RED
      kv.show "To resolve this problem change SELinux mode to ${CL_BOLD}Permissive${CL_NORM}"
      kv.show "by ${CL_BOLD}sudo setenforce 0${CL_NORM} command or configure SELinux context."

      return $ACTION_ERROR
    fi
  fi
}

getArgs() {
  local args="-d -P ${kv[pid_file]} -u $user -p $port -m $cache_size -c $max_conn"

  [[ $master_ip ]] && args="$args -x $master_ip"
  [[ $master_ip && $master_port ]] && args="$args -X $master_port"

  echo "$args"
}

###############################################################################

kv.go $@
