#!/bin/bash

# mongod - Startup script for mongod

# chkconfig: 35 85 15
# description: Mongo is a scalable, document-oriented database.
# processname: mongod
# config: /etc/mongod.conf
# pidfile: /var/run/mongo/mongod.pid

#######################################################################################

source /etc/init.d/kaosv

#######################################################################################

kv[prog_name]="mongod"

kv.readSysconfig

binary=${BINARY:-/usr/bin/${kv[prog_name]}}
config=${CONFIG:-/etc/${kv[prog_name]}.conf}
user=${USER:-${kv[prog_name]}}
group=${GROUP:-${kv[prog_name]}}
limit=${LIMIT:-12000}
opts="${OPTS}"

kv[delay_stop]=300
kv[pid_file]=`kv.readProperty "$config" "pidfilepath"`
kv[daemonize_user]="$user"
kv[search_pattern]="$binary -f $config"

db_path=`kv.readProperty "$config" "dbpath"`

#######################################################################################

kv.addHandler "start"   "startServiceHandler"
kv.addHandler "stop"    "stopServiceHandler"

kv.addCommandVars "stop" "force"

#######################################################################################

startServiceHandler() {
  local numa=`getNUMAArgs`

  kv.daemonize "$numa $binary -f $config $opts"

  [[ $? -ne 0 ]] && return $ACTION_ERROR

  kv.getStartStatus

  return $?
}

stopServiceHandler() {
  local pid=`kv.getPid`

  kv.sendSignal "$SIGNAL_TERM"

  if kv.getStopStatus ; then
    return $ACTION_OK
  else
    if [[ "$1" == "true" || "$1" == "force" ]] ; then
      kv.killProcess $pid 
      [[ $? -eq 0 ]] && return $ACTION_FORCED || return $ACTION_ERROR
    fi

    return $ACTION_ERROR
  fi
}

getNUMAArgs() {
  local args="--interleave=all"

  if which numactl &> /dev/null && numactl $args ls / &> /dev/null ; then
    local numactl_path=`which numactl`
    echo "$numactl_path $args"
  fi
}

#######################################################################################

ulimit -n $limit

kv.go $@