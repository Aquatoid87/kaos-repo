#!/bin/bash

# goval-server  init file for starting up the goval-dictionary server
#
# chkconfig:   - 20 80
# description: Starts and stops the goval-dictionary server

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kv[prog_name]="goval-server"

kv.readSysconfig

binary="/usr/bin/goval-dictionary"
fetcher="/usr/bin/goval-dictionary-fetch"
data_dir="${DATA_DIR:-/opt/goval-dictionary/data}"
ip="${IP:-127.0.0.1}"
port="${PORT:-1324}"
log_dir="${LOG_DIR:-/var/log/goval-dictionary}"

kv[user]="${USER:-vuls}"
kv[log]="${LOG:-$log_dir/goval-server.log}"

kv[search_pattern]="$binary -dbpath"

###############################################################################

kv.addHandler "start" "startServiceHandler"
kv.addHandler "start" "preStartServiceHandler" "pre"
kv.addHandler "stop"  "stopServiceHandler"

kv.disableOutputRedirect "start" "pre"

###############################################################################

prepare() {
  local has_errors=""

  [[ ! -e $binary ]] && has_errors=true && kv.error "goval-dictionary is not found"
  [[ ! -x $binary ]] && has_errors=true && kv.error "goval-dictionary must be executable file"
  [[ ! -e $fetcher ]] && has_errors=true && kv.error "Fetcher is not found"
  [[ ! -x $fetcher ]] && has_errors=true && kv.error "Fetcher must be executable file"
  [[ ! -e $data_dir ]] && has_errors=true && kv.error "Data directory is not exist"
  [[ ! -d $data_dir ]] && has_errors=true && kv.error "Wrong path to data directory"

  [[ $has_errors ]] && kv.exit $ACTION_ERROR
}

###############################################################################

preStartServiceHandler() {
  touch ${kv[log]}
  chown ${kv[user]}: ${kv[log]}

  if [[ -e "$data_dir/cve.sqlite3" ]] ; then
    return $ACTION_OK
  fi

  kv.show "Fetching all available CVE data..." $GREY

  $fetcher "$data_dir" all
  chown ${kv[user]}: $data_dir/*

  kv.show ""

  return $ACTION_OK
}

startServiceHandler() {
  kv.daemonize "$binary" "server" "-dbpath=${data_dir}/oval.sqlite3" "-bind=${ip}" "-port=${port}" "-log-dir=${log_dir}"

  [[ $? -ne 0 ]] && return $ACTION_ERROR

  if kv.getStartStatus ; then
    return $ACTION_OK
  fi

  return $ACTION_ERROR
}

stopServiceHandler() {
  kv.sendSignal "$SIGNAL_TERM"

  if kv.getStopStatus ; then
    return $ACTION_OK
  fi

  return $ACTION_ERROR
}

###############################################################################

prepare

kv.go "$@"
