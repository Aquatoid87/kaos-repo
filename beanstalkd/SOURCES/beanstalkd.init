#!/bin/bash

# beanstalkd - a simple, fast workqueue service
#
# chkconfig:   - 57 47
# description: a simple, fast workqueue service
# processname:  beanstalkd
# config:       /etc/sysconfig/beanstalkd
#              

### BEGIN INIT INFO
# Provides: beanstalkd
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Default-Stop: 0 1 2 6
# Short-Description: start and stop beanstalkd
# Description: a simple, fast work-queue service
### END INIT INFO

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kv[prog_name]="beanstalkd"

kv.readSysconfig

binary=${BINARY:-/usr/bin/beanstalkd}
addr=${ADDR:-0.0.0.0}
port=${PORT:-11300}
user=${USER:-beanstalkd}
max_job_size=${MAX_JOB_SIZE}
binlog_dir=${BINLOG_DIR}
binlog_fsync_period=${BINLOG_FSYNC_PERIOD}
binlog_size=${BINLOG_SIZE}

kv[user]="$user"
kv[search_pattern]="$binary"

###############################################################################

kv.addHandler "start"   "startServiceHandler"
kv.addHandler "start"   "preStartServiceHandler" "pre"
kv.addHandler "stop"    "stopServiceHandler"

kv.disableOutputRedirect "start" "pre"

###############################################################################

prepare() {
  if [[ ! -x $binary ]] ; then
    kv.error "Binary $binary must be executable file." $ACTION_ERROR
  fi
}

###############################################################################

preStartServiceHandler() {
  if kv.isBoundPort $port ; then 
    kv.error "Port $port already bound (used)." $ACTION_ERROR
  fi
}

startServiceHandler() {
  local args=`getServiceArgs`

  kv.daemonize $binary $args

  [[ $? -ne 0 ]] && return $ACTION_ERROR

  kv.getStartStatus

  return $?
}

stopServiceHandler() {
  local pid=`kv.getPid`

  kv.sendSignal $SIGNAL_INT

  if kv.getStopStatus "$pid" ; then
    return $ACTION_OK
  else
    kv.killProcess $pid
    return $ACTION_FORCED
  fi 
}

getServiceArgs() {
  local args="-l ${addr} -p ${port} -u ${user}"

  [[ $max_job_size ]] && args="$args -z $max_job_size"

  if [[ $binlog_dir ]] ; then
    mkdir -p $binlog_dir
    chown $user: $binlog_dir

    args="$args -b $max_job_size"

    [[ $binlog_fsync_period ]] && args="$args -f $binlog_fsync_period" || args="$args -F"
    [[ $binlog_size ]] && args="$args -s $binlog_size"
  fi

  echo "$args"
}

###############################################################################

prepare

kv.go $@
